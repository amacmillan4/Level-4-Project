package project.android.bellringing.fragments;

import java.util.ArrayList;

import project.android.bellringing.R;
import project.android.bellringing.activities.ActivityDisplayMethod;
import project.android.bellringing.activities.ActivityHelp;
import project.android.bellringing.all.AudioPlayer;
import project.android.bellringing.all.ImageId;
import project.android.bellringing.all.Method;
import project.android.bellringing.all.Score;
import project.android.bellringing.all.SetupInstructions;
import project.android.bellringing.all.SingletonData;
import project.android.bellringing.utilities.MethodStatus;
import project.android.bellringing.utilities.Utils;
import project.android.bellringing.views.BellImageView;
import project.android.bellringing.views.LinesView;
import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;

public class FragmentRingMethod extends Fragment {

	private final char[] possibleBellNumbering = Utils.getBellPossibilities(16).toCharArray();

	private Method method;
	private SetupInstructions setupInstructions;

	//ArrayLists to hold ImageViews and TextViews
	private ArrayList<BellImageView> bellImageViews = new ArrayList<BellImageView>();
	private ArrayList<TextView> bellNumberTextViews = new ArrayList<TextView>();

	private View v;

	private MethodStatus status;

	private ImageId images;
	private AudioPlayer bellAudio;
	private DisplayMethod displayMethodThread = new DisplayMethod();
	private Button showButton, runButton, helpButton;
	private int numOfBells;

	private Handler mHandler = new Handler();
	private LinesView methodView;
	private boolean paused = false;
	private boolean updatedScoreLeft = false, updatedScoreRight = false;
	private boolean userPlayingLeft = false, userPlayingRight = false;
	private double interval;
	private long pressTimeLeft, pressTimeRight, playTimeLeft, playTimeRight;
	private TextView txtMethodName, txvScoreRight, txvScoreLeft, txtRound;
	private final Score scoreLeft = new Score();
	private final Score scoreRight = new Score();

	@Override
	public void onDestroy() {
		displayMethodThread.cancel(true);
		methodView.clearText();
		super.onDestroy();
	}

	@Override
	public void onPause() {
		if(status != MethodStatus.STANDING){
			paused = true;
			updateButtonText(status, paused);	
		}
		super.onPause();
	}

	@Override
	public void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setRetainInstance(false);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState){

		//Inflate the layout
		v = inflater.inflate(R.layout.fragment_play_method, parent, false);

		//Setup
		status = MethodStatus.STANDING;
		method = new Method(SingletonData.get(getActivity()).getChosenMethod().get(0));
		setupInstructions = SingletonData.get(getActivity()).getSetup();

		numOfBells = Integer.parseInt(Utils.stageToNumBells(setupInstructions.getStage()));
		if (numOfBells % 2 == 1 && (!setupInstructions.getStage().equals("Doubles")))
			numOfBells = numOfBells + 1;

		method.initialize(numOfBells, Utils.getComposition(setupInstructions.getComposition()), 0);

		if (setupInstructions.isHandstrokeGap())
			interval = Utils.timeToMilliseconds(Integer.parseInt(setupInstructions.getPealTime().split(":")[0]),Integer.parseInt(setupInstructions.getPealTime().split(":")[1]))/(2500*(2*method.getPlayingOn()));
		else
			interval = Utils.timeToMilliseconds(Integer.parseInt(setupInstructions.getPealTime().split(":")[0]),Integer.parseInt(setupInstructions.getPealTime().split(":")[1]))/(2500*(2*method.getPlayingOn() + 1));

		bellAudio = new AudioPlayer(getActivity(), setupInstructions.getHandbellsOrNot(), method.getPlayingOn());
		images = new ImageId(setupInstructions.getHandbellsOrNot());

		//Score
		RelativeLayout scoreRightLayout = (RelativeLayout) v.findViewById(R.id.ScoreLayout);
		txvScoreRight = (TextView) v.findViewById(R.id.ScoreTextView);

		RelativeLayout scoreLeftLayout = (RelativeLayout) v.findViewById(R.id.ScoreSummaryLayout);
		txvScoreLeft = (TextView) v.findViewById(R.id.ScoreSummaryTextView);

		if(setupInstructions.isScoreBlows()){
			scoreRightLayout.setVisibility(View.VISIBLE);
			scoreLeftLayout.setVisibility(View.VISIBLE);
		}
		else{
			scoreRightLayout.setVisibility(View.INVISIBLE);
			scoreLeftLayout.setVisibility(View.INVISIBLE);
		}

		//Get handle on LinearLayout to display bells
		final LinearLayout globalLinearLayout = (LinearLayout) v.findViewById(R.id.globalView);
		globalLinearLayout.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {

				if(status != MethodStatus.STANDING){
					if (event.getX() > globalLinearLayout.getWidth()/2 || !setupInstructions.getHandbellsOrNot()){
						userPlayingRight = true;
						pressTimeRight = System.currentTimeMillis();

						if(status != MethodStatus.GO_TO_STAND_FROM_ROUNDS || status == MethodStatus.ROUNDS){
							bellAudio.play(getActivity(), bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString());

							BellImageView b = (BellImageView)v.findViewById(Integer.parseInt(Utils.bellNumberToBells(bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString())));
							b.switchImage((Integer) b.getTag(), images);
						}
					}
					else{

						userPlayingLeft = true;
						pressTimeLeft = System.currentTimeMillis();

						if(status != MethodStatus.GO_TO_STAND_FROM_ROUNDS || status == MethodStatus.ROUNDS){
							bellAudio.play(getActivity(), bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString());
							

							BellImageView b = (BellImageView)v.findViewById(Integer.parseInt(Utils.bellNumberToBells(bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString())));
							b.switchImage((Integer) b.getTag(), images);
						}
					}
				}
				return false;
			}

		});
		
		Display display = getActivity().getWindowManager().getDefaultDisplay();
		Point size = new Point();
		display.getSize(size);
		int width = size.x;
		int height = size.y;
		
		int max = Math.min(width, height);
		
		if (max > 500)
			max = 500;

		//Find out the Width of the Screen
		int widthRelLayout = (int) (max - Utils.dpToPx(25, v.getContext()));

		//Get a handle on the layout
		RelativeLayout relativeLayoutTopScreen = (RelativeLayout) v.findViewById(R.id.l1);
		relativeLayoutTopScreen.setBackgroundColor(Color.WHITE);
		relativeLayoutTopScreen.getLayoutParams().height = widthRelLayout;
		relativeLayoutTopScreen.getLayoutParams().width = widthRelLayout;

		int heightRelLayout = widthRelLayout;

		System.out.println(method.getPlayingOn());
		int scale = (int) ((heightRelLayout/ ((method.getPlayingOn() + 1)/2)) *0.8);

		//Starting positions
		int pos = ((int) (widthRelLayout/2 - scale*1.2));
		int posX = (int) (heightRelLayout/2 - scale * 0.6);

		if (method.getPlayingOn() <= 6){
			scale = (int) (scale * 0.6);
		}

		//When there are 4 bells the positions need tweaked
		if (method.getPlayingOn() == 4){
			pos = (int) Utils.dpToPx(25, v.getContext());
			posX = (int) Utils.dpToPx(110, v.getContext());
		}

		//Starting variables
		double a = 0;
		double b = 0;

		//Display the IMAGEviews
		for (int i = 0; bellImageViews.size() < method.getPlayingOn();  i++ ){

			//Use cos and sin to create circle of ImageViews
			a = pos - pos * Math.sin(Math.toRadians((i) * 180/ (int) ((method.getPlayingOn() - 1 )/ 2)));
			b = posX - posX * Math.cos(Math.toRadians((i) * 180/ (int) ((method.getPlayingOn() - 1 )/ 2)));

			if(method.getPlayingOn() == 5 && i == 0){
				a = widthRelLayout/2 - scale/2;
				b = 2;

				bellImageViews.add(initializeImgViews(getActivity(),((method.getPlayingOn()+1)/2) - i,images.getLeftDown(),RelativeLayout.ALIGN_PARENT_LEFT,
						(int) a,0,(int) b,scale - (i)));
				TextView t1 = new TextView(getActivity());
				t1.setId(20 + (method.getPlayingOn()+1/2));
				RelativeLayout.LayoutParams params1 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
				params1.setMargins((int) a + 2 , (int) (b + scale/2), 0, 0);
				t1.setLayoutParams(params1);
				t1.setBackgroundColor(Color.WHITE);
				t1.setText(Utils.bellsToBellNumber("" + ((method.getPlayingOn() + 1)/2)));
				bellNumberTextViews.add(t1);

				continue;
			}

			bellImageViews.add(initializeImgViews(getActivity(),((method.getPlayingOn()+1)/2) - i,images.getLeftDown(),RelativeLayout.ALIGN_PARENT_LEFT,
					(int) a,0,(int) b,scale - (i)));

			//Add textView with same id as ImageView + 20
			TextView t1 = new TextView(getActivity());
			t1.setId(20 + (method.getPlayingOn()+1/2) - i);
			RelativeLayout.LayoutParams params1 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
			params1.setMargins((int) a + 2 , (int) (b + scale/2), 0, 0);
			t1.setLayoutParams(params1);
			t1.setBackgroundColor(Color.WHITE);
			t1.setText(Utils.bellsToBellNumber("" + ((method.getPlayingOn()+1)/2 - i)));
			bellNumberTextViews.add(t1);

			bellImageViews.add(initializeImgViews(getActivity(),((method.getPlayingOn())/2) + i + 1,images.getRightDown(),RelativeLayout.ALIGN_PARENT_RIGHT,
					0,(int) a,(int) b,scale + ((i + 1))));

			//Add textView with same id as ImageView + 20
			TextView t2 = new TextView(getActivity());
			t2.setId(20 + (method.getPlayingOn()/2) + i + 1);
			RelativeLayout.LayoutParams params2 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
			params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
			params2.setMargins(0, (int) (b + scale/2), (int) a + 2, 0);
			t2.setLayoutParams(params2);
			t2.setBackgroundColor(Color.WHITE);
			t2.setText(Utils.bellsToBellNumber("" + ((method.getPlayingOn()/2) + i + 1)));
			bellNumberTextViews.add(t2);

		}

		//Set up TextView to display the method
		methodView = (LinesView) v.findViewById(R.id.MC_title);
		methodView.setNumberOfBells(method.getPlayingOn());
		methodView.setTypeface(Typeface.MONOSPACE);		
		methodView.setTextColor(Color.BLACK);
		methodView.setBackgroundColor(Color.WHITE);
		methodView.setClickable(false);
		methodView.isHandbells(setupInstructions.getHandbellsOrNot());

		//Set up TextView to display the method name
		txtMethodName = new TextView(getActivity());
		txtMethodName.setId(999);
		RelativeLayout.LayoutParams params1 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
		params1.addRule(RelativeLayout.CENTER_HORIZONTAL);
		params1.addRule(RelativeLayout.CENTER_VERTICAL);
		txtMethodName.setLayoutParams(params1);
		txtMethodName.setBackgroundColor(Color.WHITE);
		txtMethodName.setText(method.getMethodName());

		//Set up TextView to display the method name
		txtRound = new TextView(getActivity());
		RelativeLayout.LayoutParams params2 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
		params2.addRule(RelativeLayout.ABOVE, txtMethodName.getId());
		params2.addRule(RelativeLayout.CENTER_HORIZONTAL);
		txtRound.setLayoutParams(params2);
		txtRound.setBackgroundColor(Color.WHITE);

		showButton = (Button) v.findViewById(R.id.btnStop);
		showButton.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View view) {

				if(paused){
					status = MethodStatus.STANDING;
					paused = false;
					methodView.clearText();
					
					method = new Method((Method) SingletonData.get(getActivity()).getChosenMethod().get(0));
					method.initialize(numOfBells, Utils.getComposition(setupInstructions.getComposition()), 0);

				}else{

					if (status == MethodStatus.STANDING){
						Intent i = new Intent(getActivity(), ActivityDisplayMethod.class);
						getActivity().startActivity(i);
					}else if(status == MethodStatus.ROUNDS || status == MethodStatus.PLAYING) {

						if (status == MethodStatus.ROUNDS)
							status = MethodStatus.GO_TO_STAND_FROM_ROUNDS;
						else
							status = MethodStatus.GO_TO_STAND;
						
						bellAudio.playSound(getActivity(), "stand");


						for (BellImageView b: bellImageViews)
							b.setClickable(true);

					}
				}

				updateButtonText(status, paused);

			}
		});

		//Set-up Button to run the method
		runButton = (Button) v.findViewById(R.id.btnRun);
		runButton.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View view) {
				//Start Method

				if(paused){
					paused = false;

				}else{

					if(status == MethodStatus.STANDING){
						methodView.calcDimensions();
						
						System.out.println("HERE" + methodView.getWidth());
						status = MethodStatus.ROUNDS;
						method.swapRound();

						displayMethodThread = new DisplayMethod();
						displayMethodThread.execute();

					}

					else if(status == MethodStatus.ROUNDS) {
						status = MethodStatus.GO_TO_PLAYING;
						bellAudio.playSound(getActivity(), "go");
					}
					else if(status == MethodStatus.PLAYING){
						status = MethodStatus.GO_TO_ROUNDS;
						bellAudio.playSound(getActivity(), "rounds");

					}

				}

				updateButtonText(status, paused);
			}
		});

		helpButton = (Button) v.findViewById(R.id.btnHelp);
		helpButton.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (status!= MethodStatus.STANDING){

					if(paused){
						Intent i = new Intent(getActivity(), ActivityHelp.class);
			        	i.putExtra("Parent", new ComponentName(getActivity(), ""));	        	
						getActivity().startActivity(i); 
					}
					else
						paused = true;
				}
				else{
					Intent i = new Intent(getActivity(), ActivityHelp.class);
		        	i.putExtra("Parent", new ComponentName(getActivity(), ""));	        	
					getActivity().startActivity(i); 
				}

				updateButtonText(status, paused);
			}
		});



		for(BellImageView i : bellImageViews){
			relativeLayoutTopScreen.addView(i);
		}

		for(TextView i : bellNumberTextViews){
			relativeLayoutTopScreen.addView(i);
		}

		relativeLayoutTopScreen.addView(txtMethodName);
		relativeLayoutTopScreen.addView(txtRound);

		return v;
	}




	public class DisplayMethod extends AsyncTask<Void,Void,Void>{


		@Override
		protected synchronized Void doInBackground(Void... arg0) {

			//Variables
			final ArrayList<String> bells = new ArrayList<String>();
			String currentText = "";
			int i = 0;
			int round = 0;
			pressTimeLeft = 0;
			pressTimeRight = 0;
			playTimeLeft = 0;
			playTimeRight  = 0;
			String stopAtRoundsString = "";
			String roundsTest = Utils.getBellPossibilities(method.getPlayingOn());

			for (char a: possibleBellNumbering){
				bells.add(a + "");
			}

			mHandler.post(new Runnable() {
				@Override
				public void run() {

					methodView.clearText();

					//Nullify listeners while playing
					for (BellImageView b: bellImageViews)
						b.setClickable(false);

					//Ensures the view draws the lines
					methodView.drawLines(true);

					//Sets which bell the user is playing
					methodView.setBell(bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString());
					methodView.setSecondBell(bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString());



				}
			}); 


			while (status != MethodStatus.STANDING){

				//Display the number of completed rows
				if (i % method.getPlayingOn() == 0 && (status == MethodStatus.PLAYING || status == MethodStatus.GO_TO_STAND || status == MethodStatus.GO_TO_ROUNDS)){
					round++;
					final int temp = round;

					mHandler.post(new Runnable() {
						@Override
						public void run() {
							txtMethodName.setText("" + temp);
						}
					}); 
				}

				//Re-initialise scoring variables
				final String next = method.calcNext();

				//If text reaches the length of the number of bells then it is due a new line character
				if ((currentText.length() - method.getPlayingOn()) % ((method.getPlayingOn()) + 1) == 0 && currentText.length() >= method.getPlayingOn()){
					currentText += "\n";				
					stopAtRoundsString += "\n";
				}

				//Add the next letter to the current text
				currentText += next;

				if (setupInstructions.isStopAtRounds()){
					stopAtRoundsString += next;

					if(stopAtRoundsString.length() > method.getPlayingOn() + 1)
						stopAtRoundsString = stopAtRoundsString.substring(stopAtRoundsString.length() - (method.getPlayingOn() + 1), stopAtRoundsString.length());

					if(stopAtRoundsString.equals("\n" + roundsTest) && status == MethodStatus.PLAYING)
						status = MethodStatus.STANDING;
				}

				final String cText = currentText;

				//Record the play time and play the bell
				if (bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString().equals(next))
					playTimeRight = System.currentTimeMillis();

				else if(bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString().equals(next))
					playTimeLeft = System.currentTimeMillis();

				//Waits for user
				if (setupInstructions.isWaitForMe() 
						&& bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString().equals(next) 
						&& (status == MethodStatus.PLAYING || status == MethodStatus.GO_TO_STAND || status == MethodStatus.GO_TO_ROUNDS)){

					while (pressTimeRight == 0) {
						try {
							wait(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}

				//Waits for user
				if (setupInstructions.isWaitForMe() 
						&& bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString().equals(next) 
						&& (status == MethodStatus.PLAYING || status == MethodStatus.GO_TO_STAND || status == MethodStatus.GO_TO_ROUNDS)){

					while (pressTimeLeft == 0) {
						try {
							wait(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}

				mHandler.post(new Runnable() {
					@Override
					public void run() {

						//TODO Calculate Score
						if (pressTimeRight != 0 && bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString().equals(next) && status == MethodStatus.PLAYING){
							updatedScoreRight = true;
							txvScoreRight.setText(scoreRight.calculateScore(playTimeRight, pressTimeRight) + "");
						}

						if (pressTimeLeft != 0 && bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString().equals(next) && status == MethodStatus.PLAYING){
							updatedScoreLeft = true;
							txvScoreLeft.setText(scoreLeft.calculateScore(playTimeLeft, pressTimeLeft) + "");
						}

						//Displays the correct amount of text on screen
						methodView.setLimitingText(method.getPlayingOn(), cText, 6);

						
						String bobOrSingle = method.textBobSinglePlain();
						txtRound.setText(bobOrSingle);
						if (bobOrSingle.equals("bob")||bobOrSingle.equals("single")){
							bellAudio.playSound(getActivity(), bobOrSingle);
						}

						if (status == MethodStatus.PLAYING && ( (userPlayingLeft && bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString().equals(next)) ||
								(userPlayingRight && bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString().equals(next)))){
							//Do not switch bell
						}
						else{
							//Switch the bell position
							BellImageView b = (BellImageView)v.findViewById(bells.indexOf(next) + 1);
							b.switchImage((Integer) b.getTag(), images);
						}
					}
				}); 



				if ((userPlayingRight && bellNumberTextViews.get(bellNumberTextViews.size() - 1).getText().toString().equals(next))
						|| (userPlayingLeft && bellNumberTextViews.get(bellNumberTextViews.size() - 2).getText().toString().equals(next))){
					//DO NOT PLAY
				}
				else
					bellAudio.play(getActivity(),next);

				i++;

				try {
					wait((long) (interval));

					if(playTimeLeft + 500 < System.currentTimeMillis() && playTimeLeft != 0 && status == MethodStatus.PLAYING){

						mHandler.post(new Runnable() {
							@Override
							public void run() {

								if (!updatedScoreLeft){

									if (pressTimeLeft != 0)
										txvScoreLeft.setText(scoreLeft.calculateScore(playTimeLeft, pressTimeLeft) + "");
									else
										txvScoreLeft.setText(scoreLeft.calculateScore(playTimeLeft, 0) + "");

								}
								pressTimeLeft = 0;
								playTimeLeft = 0;
								updatedScoreLeft = false;

							}});
					}

					if(playTimeRight + 500 < System.currentTimeMillis() && playTimeRight != 0 && status == MethodStatus.PLAYING){


						mHandler.post(new Runnable() {
							@Override
							public void run() {

								if (!updatedScoreRight){

									if (pressTimeRight != 0)
										txvScoreRight.setText(scoreRight.calculateScore(playTimeRight, pressTimeRight) + "");
									else
										txvScoreRight.setText(scoreRight.calculateScore(playTimeRight, 0) + "");

								}
								pressTimeRight = 0;
								playTimeRight = 0;
								updatedScoreRight = false;

							}});
					}



					if (i % ((method.getPlayingOn()) * 2) == 0 ){

						//Enabling the handstroke gap
						if(setupInstructions.isHandstrokeGap())
							wait((long) interval);

						if(status == MethodStatus.GO_TO_ROUNDS){
							method.swapRound();
							status = MethodStatus.ROUNDS;
						}

						if(status == MethodStatus.GO_TO_PLAYING){
							method.swapRound();
							status = MethodStatus.PLAYING;		
						}

						if(status == MethodStatus.GO_TO_STAND || status == MethodStatus.GO_TO_STAND_FROM_ROUNDS || status == MethodStatus.STANDING){

							if (status == MethodStatus.GO_TO_STAND_FROM_ROUNDS)
								method.swapRound();

							status = MethodStatus.STANDING;

							mHandler.post(new Runnable() {
								
								@Override
								public void run() {
									
									for( BellImageView b: bellImageViews)
										b.restart((Integer) b.getTag(), images);
									
									if (userPlayingLeft && setupInstructions.isScoreSummary())
										txvScoreLeft.setText("" + scoreLeft.getAverage());
									if (userPlayingRight && setupInstructions.isScoreSummary())
										txvScoreRight.setText("" + scoreRight.getAverage());
								}});

							userPlayingLeft = false;
							userPlayingRight = false;

							method = new Method((Method) SingletonData.get(getActivity()).getChosenMethod().get(0));
							method.initialize(numOfBells, Utils.getComposition(setupInstructions.getComposition()), 0);
						}

						mHandler.post(new Runnable() {
							@Override
							public void run() {

								updateButtonText(status, paused);
							}
						}); 

					}

					while(paused && !isCancelled())
						wait(500);

					if (isCancelled()){
						if (status == MethodStatus.ROUNDS)
							method.swapRound();

						status = MethodStatus.STANDING;
					}


				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			return null;
		}

	}
	private void swap_TextView(){

		for(int i = 0; i < method.getPlayingOn(); i++){
			TextView a =  bellNumberTextViews.get(i);
			a.setText("" + possibleBellNumbering[bellImageViews.get(i).getId()-1]);			
		}
	}

	//Method to swap the location of ImageViews based on where the user clicks
	private void swap_ImageView(int a){

		//Creates 2 copies of the original data
		ArrayList<BellImageView> copy = new ArrayList<BellImageView>(bellImageViews);
		ArrayList<BellImageView> tmp = new ArrayList<BellImageView>(bellImageViews);

		//Keeps switching positions until id is last in the ArrayList (Last means selected bell - BOTTOM RIGHT)
		while (copy.get(copy.size() - 1).getId() != a){

			for(int i = 0; i < tmp.size(); i++){

				if (i == 1){
					copy.set(i, tmp.get(0));
				}
				else if ( i == tmp.size() - 2){
					copy.set(i, tmp.get(tmp.size() - 1));
				}
				else if(i % 2 == 0){
					copy.set(i, tmp.get(i + 2));
				}
				else if(i % 2 == 1){
					copy.set(i, tmp.get(i - 2));
				}
			}

			tmp =  new ArrayList<BellImageView>(copy);

		}

		//Temporary Stores for each margin
		ArrayList<Integer> left = new ArrayList<Integer>();
		ArrayList<Integer> right = new ArrayList<Integer>();
		ArrayList<Integer> top = new ArrayList<Integer>();

		//Stores the margins of the originals in the ArrayList
		for(int i = 0; i < bellImageViews.size(); i++){
			BellImageView x1 = (BellImageView) (bellImageViews.get(i));
			LayoutParams params = (LayoutParams) x1.getLayoutParams();

			left.add(params.leftMargin);
			right.add(params.rightMargin);
			top.add(params.topMargin);		
		}

		//Updates the ImageViews with their new positions based on the margins
		for(int i = 0; i < bellImageViews.size();i++){
			BellImageView x1 = (BellImageView) (copy.get(i));
			LayoutParams params = (LayoutParams) x1.getLayoutParams();

			LayoutParams params1 =  new LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);

			params1.leftMargin = left.remove(0);
			params1.rightMargin = right.remove(0);
			params1.topMargin = top.remove(0);

			//If an ImageView has changed side, update image with bell for correct side
			if(params1.rightMargin == 0){
				params1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
				x1.setImageResource(images.getLeftDown());
			}
			else{
				params1.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
				x1.setImageResource(images.getRightDown());
			}

			params1.height = params.height;
			params1.width = params.height;

			x1.setLayoutParams(params1);
		}

		//Save the changes
		bellImageViews = copy;

	}

	private void updateButtonText(MethodStatus s, boolean paused){

		if (paused){
			runButton.setText("Continue");
			helpButton.setText("Help");
			showButton.setText("Stop");
		}
		else if (s == MethodStatus.PLAYING){
			runButton.setText("Rounds");
			helpButton.setText("Pause");
			showButton.setText("Stand");
		}
		else if (s == MethodStatus.ROUNDS){
			runButton.setText("Go");
			helpButton.setText("Pause");
			showButton.setText("Stand");
		}
		else if (s == MethodStatus.STANDING){
			runButton.setText("Start");
			helpButton.setText("Help");
			showButton.setText("Show");
		}
		else if (s == MethodStatus.GO_TO_PLAYING){
			runButton.setText("");
			helpButton.setText("Pause");
			showButton.setText("Stand");
		}
		else if (s == MethodStatus.GO_TO_ROUNDS){
			runButton.setText("");
			helpButton.setText("Pause");
			showButton.setText("Stand");
		}
		else if (s == MethodStatus.GO_TO_STAND){
			runButton.setText("");
			helpButton.setText("");
			showButton.setText("");
		}
		else if (s == MethodStatus.GO_TO_STAND_FROM_ROUNDS){
			runButton.setText("");
			helpButton.setText("");
			showButton.setText("");
		}

	}

	//Method to create the ImageViews and TextViews based on the users input
	private BellImageView initializeImgViews(Activity a,final int id,final int imageResource1,int layoutFeature1,int marginLeft,int marginRight,int marginTop,int height){

		//Create new BellImageView
		final BellImageView im = new BellImageView(a);

		//Set id & image source
		im.setId(id);
		im.setImageResource(imageResource1);

		//Set out Layout
		RelativeLayout.LayoutParams params1 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
		params1.addRule(layoutFeature1);	
		params1.setMargins(marginLeft,marginTop,marginRight,10);
		im.setLayoutParams(params1);

		//Edit Image Height & Width
		im.getLayoutParams().height = height;
		im.getLayoutParams().width = height;

		//Set up Listener
		im.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View view) {

				swap_ImageView(id);
				swap_TextView();


			}
		});

		return im;
	}


}
