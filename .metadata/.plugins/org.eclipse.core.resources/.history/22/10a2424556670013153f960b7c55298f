

import java.util.ArrayList;
import java.util.Collections;

public class Method2 {

	private String name;
	private String type;
	private String wholeMethod;
	private String method;
	private String leadEnd;
	private int bells;

	private final char[] possibleBellNumbering = {'1','2','3','4','5','6','7','8','9','0','E','T','A','B','C','D'};
	private ArrayList<String> bellNumbering;

	private ArrayList<String> methodChanges;
	private int loops;

	private String currentLine;

	private int currentMethodSection;
	private int currentOperationSection = 0;

	private int currentStart = 0;
	private boolean handStroke = true;

	boolean rounds = false;

	public Method2(String name, String type, String wholeMethod, String bells) {
		this.name = name;
		this.type = type;
		this.bells = Integer.parseInt(bells);
		this.wholeMethod = wholeMethod;
		
		if (wholeMethod.charAt(0) == '&'){
			this.method = wholeMethod.split(",")[0].substring(1,wholeMethod.split(",")[0].length() );
			this.leadEnd = wholeMethod.split(",")[1];
		}
		else if (wholeMethod.charAt(0) == '+'){
			this.method = wholeMethod.substring(1, wholeMethod.length());
			this.leadEnd = "";
		}
	}
	
	public Method2(String line) {	
		new Method2(line.split("\t")[0], line.split("\t")[1], line.split("\t")[3], line.split("\t")[2] );
	}

	public void initialize(){
		
		System.out.println(method);
		System.out.println(leadEnd);
		
		//Fill arrayList with correct number of bells
		methodChanges = new ArrayList<String>();
		bellNumbering = new ArrayList<String>(bells);
		
		for(int i = 0; i < bells; i++)
			bellNumbering.add(possibleBellNumbering[i] + "");

		//Get the unreversed changes
		ArrayList<String> unreversedMethod = implementChanges(method);
		ArrayList<String> unreversedLeadEnd = implementChanges(leadEnd);

		//Reverse the changes
		unreversedMethod = reverseMethod(unreversedMethod);
		unreversedLeadEnd = reverseMethod(unreversedLeadEnd);

		//Add the both
		methodChanges.addAll(unreversedMethod);
		methodChanges.addAll(unreversedLeadEnd);

		//Variables for calculating the next bell
		currentLine = "";
		currentMethodSection = 0;
		currentOperationSection = 0;

		for(int i = 0; i < bells; i++)
			currentLine += bellNumbering.get(i);

	}
	
	public ArrayList<String> reverseMethod(ArrayList<String> changes){
		
		//If it is of size 1 or less no reversing needs done
		if (changes.size() <= 1)
			return changes;
		
		 //Reverse method (apart from last) and add to previous ArrayList
		ArrayList<String> reverse = changes;
		Collections.reverse(reverse);
		reverse.remove(0);
		changes.addAll(reverse);
		return changes;
	}
	
	public ArrayList<String> implementChanges(String methodString){
		
		ArrayList<String> unreversedMethodChanges = new ArrayList<String>();
		
		//If it is an asynchronous method this will be empty
				if(methodString.equals(""))
					return unreversedMethodChanges;
		
		char[] stringToCharArray = methodString.toCharArray();
		String changes = "";
		
		//Changes that are required
		for(char a: stringToCharArray){
			
			//Dot ends the section of changes - add old changes and ready string for new
			if (a == '.'){
				unreversedMethodChanges.add(changes);
				changes = "";
			}
			else if (a == '-'){
				
				//Only add if there has been some change - add an x - representing all to switch
				if (!changes.equals(""))
					unreversedMethodChanges.add(changes);
				
				unreversedMethodChanges.add("x");
				changes = "";
			}
			else{ 
				changes += a;
			}
		}
		
		//Add anything that is left
		unreversedMethodChanges.add(changes);
		
		return unreversedMethodChanges;
	}

	public String start(){

		if (handStroke == false && currentStart == bellNumbering.size()){
			currentStart = 0;
			handStroke = true;
		}

		if (handStroke == true && currentStart == bellNumbering.size()){
			currentStart = 0;
			handStroke = false;
		}

		return bellNumbering.get(currentStart++);

	}

	public void swapRound(){

		if (rounds)
			rounds = false;
		else
		{
			restartMethod();
			rounds = true;
		}
	}

	public void restartMethod(){

		bellNumbering = new ArrayList<String>(bells);

		for(int i = 0; i < bells; i++)
			bellNumbering.add(possibleBellNumbering[i] + "");

		loops = 0;
		currentMethodSection = 0;
		currentOperationSection = 0;

		currentLine = "";
		for(int i = 0; i < bells; i++)
			currentLine += bellNumbering.get(i);

		System.out.println("RESTART "+currentLine);
	}

	public String calcNext(){

		if (rounds == true){
			return start();
		}
		else{

			if (loops == (bells - 1) && currentMethodSection == bells)
				return "\r";

			if (currentOperationSection == methodChanges.size()){
				currentOperationSection = 0;
				loops++;
			}			

			if (currentMethodSection == bells || ((currentMethodSection == 0 && currentOperationSection == 0))){
				currentLine = calcLine(currentLine, methodChanges.get(currentOperationSection++));
				currentMethodSection = 0;
			}

			return currentLine.toCharArray()[currentMethodSection++] + "";
		}

	}

	public String calcLine(String lastLine, String operation){

		String newLine = lastLine;

		if (operation.equals("x")){
			for (int i = 1; i <= bells; i = i + 2)
				newLine = swap(newLine, i , i+1);
		}

		else {

			char[] temp = operation.toCharArray();
			ArrayList<String> copy = new ArrayList<String>(bellNumbering);

			for (int i = 0; i < temp.length; i++)
				copy.set(bellNumbering.indexOf(temp[i] + ""), "REMOVE");

			copy.removeAll(Collections.singleton("REMOVE"));

			for (int i = 0; i < copy.size(); i = i + 2)
				newLine = swap(newLine,bellNumbering.indexOf(copy.get(i)) + 1, bellNumbering.indexOf(copy.get(i+1)) + 1);

		}

		return newLine;
	}

	private String swap(String b, int pos1, int pos2){

		char[] a = b.toCharArray();

		char temp = a[pos1 - 1];
		a[pos1 - 1] = a[pos2 - 1];
		a[pos2 - 1] = temp;

		String c = new String(a);

		return c;

	}

	public String getLeadEnd() {
		return leadEnd;
	}

	public void setLeadEnd(String leadEnd) {
		this.leadEnd = leadEnd;
	}

	public int getBells() {
		return bells;
	}

	public void setBells(int bells) {
		this.bells = bells;
	}

	public String getName() {
		return name;
	}
	
	public String getType() {
		return type;
	}
	
	public void setName(String name) {
		this.name = name;
	}

	public void arr(){

		System.out.println(methodChanges.size());
		for (String s: methodChanges)
			System.out.print(s + " " );
	}

	@Override
	public String toString() {
		return name + "\t" + type + "\t" + method + "," + leadEnd + "\t" + bells;
	}

}
