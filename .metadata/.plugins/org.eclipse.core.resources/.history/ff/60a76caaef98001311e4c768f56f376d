import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import FormatIO.EofX;
import FormatIO.FileIn;


public class CTO {

	static String[] letterFreq = {" ", "e", "t", "a", "o", "i", "n", "s", "h", "r", "d", "l", "u", "c", "m", "f", "w", "g", "y", "p", "b", "v", "k"};
	static Double[] letterFreqScoring = {13.0, 12.6, 9.1, 8.0, 7.6, 7.0, 7.0, 6.3, 6.2, 6.0, 4.3, 4.1, 2.8, 2.6, 2.6, 2.3, 2.2, 2.0, 2.0, 1.8, 1.5, 1.0, 0.7};

	static String[] biFreq = {"th", "he", "in", "er", "an", "re", "nd", "on", "en", "at", "ou", "ed", "ha", "to", "or", "it", "is", "hi", "es", "ng"};
	static Double[] biFreqScoring = {3.8, 3.6, 2.2, 2.2, 2.1, 1.8, 1.6, 1.4, 1.4, 1.3, 1.3, 1.3, 1.3, 1.2, 1.2, 1.1, 1.1, 1.1, 1.1, 1.1};

	static String[] tri = {"the", "and", "ing", "her", "hat", "his", "tha", "ere", "for", "ent", "ion", "ter", "was", "you", "ith", "ver", "all", "wit", "thi", "tio"};
	static Double[] triFreqScoring = {8.0, 3.5, 1.6, 1.1, 0.8, 0.7, 0.6, 0.6, 0.6, 0.6, 0.5, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4};

	static ArrayList<String> bigram = new ArrayList<String>();
	static ArrayList<String> trigram = new ArrayList<String>();
	static ArrayList<String> letterFrequency = new ArrayList<String>();

	static int blocksToTest = 4;
	public static int possibleKeys = 65536;

	public static void main(String args[]) throws IOException{

		bigram = new ArrayList<String>(Arrays.asList(biFreq));
		trigram = new ArrayList<String>(Arrays.asList(tri));
		letterFrequency = new ArrayList<String>(Arrays.asList(letterFreq));

		ArrayList<Integer> chosenBlocks = new ArrayList<Integer>();
		ArrayList<Integer> allBlocks = new ArrayList<Integer>();


		double high_score = 0;
		String high_key = "";
		String english_text = "";
		String key_string = "";

		// Read in ciphertext
		FileIn fin  = new FileIn("CTO.txt");
		try{
			for(int i = 0; i < blocksToTest; i++){
				String s = fin.readWord();
				chosenBlocks.add(Hex16.convert(s));
			}
		}
		catch (EofX x){}
		fin.close();
		fin  = new FileIn("CTO.txt");
		
		try{
			for(;;){
				String s = fin.readWord();
				allBlocks.add(Hex16.convert(s));
			}
		}
		catch (EofX x){}
		fin.close();
		
		//For every possible key
		for (int q = 0; q < possibleKeys; q++){

			key_string = String.format("0x%04X", q);
			int key = Hex16.convert(key_string);

			String alltext = "";

			//Calculate English for all blocks
			for (Integer block: chosenBlocks){
				int	p = Coder.decrypt(key, block);

				int	c0 = p / 256;
				int	c1 = p % 256;

				alltext += (char)c0;

				if (c1 != 0)
					alltext += (char)c1;

			}

			double score = testEnglish(alltext);

			if (score > high_score){
				high_score = score;
				high_key = key_string;
				english_text = alltext;
			}

		}
		
		String alltext = "";
		
		for (Integer block: allBlocks){
			int	p = Coder.decrypt(Hex16.convert(high_key), block);

			int	c0 = p / 256;
			int	c1 = p % 256;

			alltext += (char)c0;

			if (c1 != 0)
				alltext += (char)c1;

		}

		System.out.println("Score = " + high_score );
		System.out.println("Key = " + high_key);
		System.out.println("Decoded Text = " + english_text);
		System.out.println("All Text = " + alltext);
	}

	private static double testEnglish(String text){

		int score = 0;

		text = text.toLowerCase();

		int i;

		for (i = 0; i < text.length() - 1; i++){			
			if (letterFrequency.contains(text.substring(i, i+1)))
				score += letterFreqScoring[letterFrequency.indexOf(text.substring(i, i+1))];
		}

		for (i = 0; i < text.length() - 2; i++){
			if (bigram.contains(text.substring(i, i+2)))
				score += biFreqScoring[bigram.indexOf(text.substring(i, i+2))] * 2;
		}

		for (i = 0; i < text.length() - 3; i++){
			if (trigram.contains(text.substring(i, i+3)))
				score += triFreqScoring[trigram.indexOf(text.substring(i, i+3))] * 6;
		}

		return score;
	}

	private static double unicityDistance(int blockLength){

		//Key Length H(K) = 16^4 = 65536 = 2^16
		//Absolute Rate = log(256) = 8
		//Take r = 1.5
		//Redundancy D = 6.5


		double unicity, entropy = 16, redundancy = 6.5;

		unicity = entropy/redundancy;
		System.out.println(unicity);
		return unicity;
	}

}
